% *******************************************************************************
% * Optical coding simulation algorithm for multi-state devices
% * Optoelectronic Laboratory, School of Physics and Information Engineering, Fuzhou University
% * This code is part of the application of multi-state devices to optical coding.
% * V1:2020/09/03
% * V2:2020/10/05
% * Developer list: 
% * Xianghong Zhang     Email: 982663975@qq.com 
% ********************************************************************************/


% Load training data and test data, and retrain the classification model.
filename = "data.csv";
data = readtable(filename,'TextType','string');
filename = "test.csv";
test = readtable(filename,'TextType','string');
[trainedClassifier, validationAccuracy] = trainClassifier(data);
address = [0,0];    % Encode the specified position, the default is to start encoding from the first letter.

% The output value here is the encoding result of the input data of the real experiment.
yfit = trainedClassifier.predictFcn(test);
ExperimentalCodingResults = cell2mat(reshape(yfit,1,numel(yfit)))  

% Obtain the experimental polymorphic curve
load('LTPInitial.CSV');
LTP_Dark = LTPInitial(:,1);
LTP = LTPInitial(30:80,2:8);
LTP = reshape(LTP,numel(LTP),1);
LTP = [LTP_Dark;LTP];
clear LTP_Dark;

% Call the fitting function to fit the polymorphic curve
Id_simulink=TestSource();
Id_simulink=reshape(Id_simulink,437,1);
LTPandSimulink=[LTP Id_simulink];

% Compare experimental and fitted polymorphic curves.
LTPandSimulink=LTPandSimulink*(1e9);
plot(LTPandSimulink,'lineWidth',2);
ylabel('Id(nA)');
xlabel('Time(s)');
legend('Experiment','Simulink');
title('Comparison of experimental data and fitted data');
axis([0,450,0,850]);

if any(address)
% Encode the specified position.
    Input1=80;
    Input2=170;
    LightArray = zeros(4,8);
    LightArray(address(1),2*address(2)-1)=lightsource(Input1);
    LightArray(address(1),2*address(2)) = lightsource(Input2); 
else
% Encoding starts from the first letter by default.    
% Load the optical wavelength matrix used for optical coding simulation
load('InputLight.csv');
LightArray=zeros(4,8);

%Obtain the current response generated by each input wavelength
for m=1:4
    for n=1:8
        LightArray(m,n)=lightsource(InputLight(m,n));
    end
end
end

% Optically encode the input wavelength matrix
t=1;
for m=1:4
    for n=1:4
        T1(t)=LightArray(m,2*n-1);
        T2(t)=LightArray(m,2*n);
        t=t+1;
    end
end

% Arrange the current data obtained from the simulation into a format conforming to the classification and classify it
Names={'T1','T2'};
T1=reshape(T1,numel(T1),1);
T2=reshape(T2,numel(T2),1);
outtable = table(T1,T2,'VariableNames',Names);
yfit = trainedClassifier.predictFcn(outtable);
for k=1:16
    if yfit(k)=="32"
%        sprintf(' ')
        SimulatingOpticalCodingResults = cell2mat(reshape(yfit(1:k-1),1,k-1))
        break;
    end
end
%SimulatingOpticalCodingResults = cell2mat(reshape(yfit,1,numel(T1)))

% After the simulation is completed, delete all useless variables generated during the simulation process
clear filename m n t k LTP_Dark Names;
